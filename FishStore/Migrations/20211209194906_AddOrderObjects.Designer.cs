// <auto-generated />
using System;
using FishStore.EF.Contextst;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FishStore.Migrations
{
    [DbContext(typeof(BaseContext))]
    [Migration("20211209194906_AddOrderObjects")]
    partial class AddOrderObjects
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("FishStore.Entities.Accounting.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasAlternateKey("Email");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FishStore.Entities.BaseObject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.HasKey("ID");

                    b.ToTable("BaseObjects");
                });

            modelBuilder.Entity("FishStore.Entities.DictObject", b =>
                {
                    b.HasBaseType("FishStore.Entities.BaseObject");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("DictObjects");
                });

            modelBuilder.Entity("FishStore.Entities.Ordering.Cart", b =>
                {
                    b.HasBaseType("FishStore.Entities.BaseObject");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("FishStore.Entities.Ordering.OrderItem", b =>
                {
                    b.HasBaseType("FishStore.Entities.BaseObject");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("FishStore.Entities.TypeObject", b =>
                {
                    b.HasBaseType("FishStore.Entities.BaseObject");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("TypeObjects");
                });

            modelBuilder.Entity("FishStore.Entities.Accounting.Role", b =>
                {
                    b.HasBaseType("FishStore.Entities.DictObject");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            ID = 100,
                            Name = "User"
                        },
                        new
                        {
                            ID = 101,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("FishStore.Entities.Products.ProductDicts.TypeOfBait", b =>
                {
                    b.HasBaseType("FishStore.Entities.DictObject");

                    b.ToTable("TypesOfBait");
                });

            modelBuilder.Entity("FishStore.Entities.Products.ProductDicts.TypeOfClothing", b =>
                {
                    b.HasBaseType("FishStore.Entities.DictObject");

                    b.ToTable("TypesOfClothing");
                });

            modelBuilder.Entity("FishStore.Entities.Products.ProductDicts.TypeOfGear", b =>
                {
                    b.HasBaseType("FishStore.Entities.DictObject");

                    b.ToTable("TypesOfGear");
                });

            modelBuilder.Entity("FishStore.Entities.Products.ProductDicts.TypeOfRod", b =>
                {
                    b.HasBaseType("FishStore.Entities.DictObject");

                    b.ToTable("TypesOfRod");
                });

            modelBuilder.Entity("FishStore.Entities.Ordering.Order", b =>
                {
                    b.HasBaseType("FishStore.Entities.TypeObject");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FishStore.Entities.Products.ProductObject", b =>
                {
                    b.HasBaseType("FishStore.Entities.TypeObject");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderID")
                        .HasColumnType("int");

                    b.Property<string>("PhotoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasIndex("OrderID");

                    b.ToTable("ProductObjects");
                });

            modelBuilder.Entity("FishStore.Entities.Products.Bait", b =>
                {
                    b.HasBaseType("FishStore.Entities.Products.ProductObject");

                    b.Property<int>("TypeOfBaitID")
                        .HasColumnType("int");

                    b.HasIndex("TypeOfBaitID");

                    b.ToTable("Baits");
                });

            modelBuilder.Entity("FishStore.Entities.Products.Clothing", b =>
                {
                    b.HasBaseType("FishStore.Entities.Products.ProductObject");

                    b.Property<int>("TypeOfClothingID")
                        .HasColumnType("int");

                    b.HasIndex("TypeOfClothingID");

                    b.ToTable("Clothings");
                });

            modelBuilder.Entity("FishStore.Entities.Products.Gear", b =>
                {
                    b.HasBaseType("FishStore.Entities.Products.ProductObject");

                    b.Property<int>("TypeOfGearID")
                        .HasColumnType("int");

                    b.HasIndex("TypeOfGearID");

                    b.ToTable("Gears");
                });

            modelBuilder.Entity("FishStore.Entities.Products.Rod", b =>
                {
                    b.HasBaseType("FishStore.Entities.Products.ProductObject");

                    b.Property<int>("TypeOfRodID")
                        .HasColumnType("int");

                    b.HasIndex("TypeOfRodID");

                    b.ToTable("Rods");
                });

            modelBuilder.Entity("FishStore.Entities.Accounting.User", b =>
                {
                    b.HasOne("FishStore.Entities.Accounting.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FishStore.Entities.DictObject", b =>
                {
                    b.HasOne("FishStore.Entities.BaseObject", null)
                        .WithOne()
                        .HasForeignKey("FishStore.Entities.DictObject", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FishStore.Entities.Ordering.Cart", b =>
                {
                    b.HasOne("FishStore.Entities.BaseObject", null)
                        .WithOne()
                        .HasForeignKey("FishStore.Entities.Ordering.Cart", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("FishStore.Entities.Products.ProductObject", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FishStore.Entities.Accounting.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FishStore.Entities.Ordering.OrderItem", b =>
                {
                    b.HasOne("FishStore.Entities.BaseObject", null)
                        .WithOne()
                        .HasForeignKey("FishStore.Entities.Ordering.OrderItem", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("FishStore.Entities.Ordering.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("FishStore.Entities.Products.ProductObject", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FishStore.Entities.TypeObject", b =>
                {
                    b.HasOne("FishStore.Entities.BaseObject", null)
                        .WithOne()
                        .HasForeignKey("FishStore.Entities.TypeObject", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FishStore.Entities.Accounting.Role", b =>
                {
                    b.HasOne("FishStore.Entities.DictObject", null)
                        .WithOne()
                        .HasForeignKey("FishStore.Entities.Accounting.Role", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FishStore.Entities.Products.ProductDicts.TypeOfBait", b =>
                {
                    b.HasOne("FishStore.Entities.DictObject", null)
                        .WithOne()
                        .HasForeignKey("FishStore.Entities.Products.ProductDicts.TypeOfBait", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FishStore.Entities.Products.ProductDicts.TypeOfClothing", b =>
                {
                    b.HasOne("FishStore.Entities.DictObject", null)
                        .WithOne()
                        .HasForeignKey("FishStore.Entities.Products.ProductDicts.TypeOfClothing", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FishStore.Entities.Products.ProductDicts.TypeOfGear", b =>
                {
                    b.HasOne("FishStore.Entities.DictObject", null)
                        .WithOne()
                        .HasForeignKey("FishStore.Entities.Products.ProductDicts.TypeOfGear", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FishStore.Entities.Products.ProductDicts.TypeOfRod", b =>
                {
                    b.HasOne("FishStore.Entities.DictObject", null)
                        .WithOne()
                        .HasForeignKey("FishStore.Entities.Products.ProductDicts.TypeOfRod", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FishStore.Entities.Ordering.Order", b =>
                {
                    b.HasOne("FishStore.Entities.TypeObject", null)
                        .WithOne()
                        .HasForeignKey("FishStore.Entities.Ordering.Order", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("FishStore.Entities.Accounting.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FishStore.Entities.Products.ProductObject", b =>
                {
                    b.HasOne("FishStore.Entities.TypeObject", null)
                        .WithOne()
                        .HasForeignKey("FishStore.Entities.Products.ProductObject", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("FishStore.Entities.Ordering.Order", null)
                        .WithMany("Products")
                        .HasForeignKey("OrderID");
                });

            modelBuilder.Entity("FishStore.Entities.Products.Bait", b =>
                {
                    b.HasOne("FishStore.Entities.Products.ProductObject", null)
                        .WithOne()
                        .HasForeignKey("FishStore.Entities.Products.Bait", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("FishStore.Entities.Products.ProductDicts.TypeOfBait", "TypeOfBait")
                        .WithMany()
                        .HasForeignKey("TypeOfBaitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeOfBait");
                });

            modelBuilder.Entity("FishStore.Entities.Products.Clothing", b =>
                {
                    b.HasOne("FishStore.Entities.Products.ProductObject", null)
                        .WithOne()
                        .HasForeignKey("FishStore.Entities.Products.Clothing", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("FishStore.Entities.Products.ProductDicts.TypeOfClothing", "TypeOfClothing")
                        .WithMany()
                        .HasForeignKey("TypeOfClothingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeOfClothing");
                });

            modelBuilder.Entity("FishStore.Entities.Products.Gear", b =>
                {
                    b.HasOne("FishStore.Entities.Products.ProductObject", null)
                        .WithOne()
                        .HasForeignKey("FishStore.Entities.Products.Gear", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("FishStore.Entities.Products.ProductDicts.TypeOfGear", "TypeOfGear")
                        .WithMany()
                        .HasForeignKey("TypeOfGearID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeOfGear");
                });

            modelBuilder.Entity("FishStore.Entities.Products.Rod", b =>
                {
                    b.HasOne("FishStore.Entities.Products.ProductObject", null)
                        .WithOne()
                        .HasForeignKey("FishStore.Entities.Products.Rod", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("FishStore.Entities.Products.ProductDicts.TypeOfRod", "TypeOfRod")
                        .WithMany()
                        .HasForeignKey("TypeOfRodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeOfRod");
                });

            modelBuilder.Entity("FishStore.Entities.Accounting.User", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FishStore.Entities.Ordering.Order", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
